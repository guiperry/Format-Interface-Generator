# jpg.yml (Simplified & Conceptual)
name: JPEG
description: JPEG File Interchange Format (Simplified Representation)
# JPEG doesn't have a single version field like NIF; features depend on markers present.

# Note: This structure is highly simplified. Real JPEG parsing involves reading markers,
# then reading segment lengths, then parsing segment-specific data, often variable-length.
# The generator would need significant enhancements to handle this flow.

structs:
  SOI: # Start Of Image
    description: The mandatory start marker.
    fields:
      - name: Marker
        type: uint16 # Represents 0xFFD8
        description: Start of Image marker (FFD8).

  GenericSegment:
    description: Represents a generic segment structure (Marker, Length, Data).
    fields:
      - name: Marker
        type: uint16 # e.g., FFE0 (APP0), FFDB (DQT), FFC4 (DHT), FFDA (SOS)
        description: Segment marker code.
      - name: Length
        type: uint16 # Big-Endian in JPEG! Generator needs to handle endianness.
        description: Length of the segment payload (including the length field itself, minus marker).
      - name: Payload
        type: "[]byte"
        # Length should be 'Length - 2' (Length field is uint16 = 2 bytes)
        # This requires the generator to handle expressions involving fields.
        length: "Length - 2"
        description: Segment data (structure varies greatly depending on Marker).

  SOSPayload: # Start Of Scan Payload (Conceptual - Real SOS is more complex)
    description: Simplified payload after the SOS marker and length.
    fields:
      - name: ScanHeader # Scan header fields would go here (NumComponents, ComponentSelectors, etc.)
        type: "[]byte" # Placeholder - needs detailed definition
        length: "..." # Scan header has a specific size depending on component count
        description: Scan component specification.
      - name: CompressedImageData
        type: "[]byte"
        # Length is NOT simply defined. It runs until the EOI marker (FFD9).
        # Generator cannot easily handle "read until marker".
        length: "" # Variable, runs until EOI marker
        description: Entropy-coded segment data (Huffman or Arithmetic).

  EOI: # End Of Image
    description: The mandatory end marker.
    fields:
      - name: Marker
        type: uint16 # Represents 0xFFD9
        description: End of Image marker (FFD9).

# --- Missing Concepts ---
# - Reading loop: Real parsing reads marker, then length, then payload, then next marker...
# - Endianness: JPEG uses Big-Endian for lengths/markers. Generator needs to support this.
# - Segment-Specific Parsing: The 'Payload' field above is too generic. Real code needs
#   switch statements based on the 'Marker' value to parse DQT, DHT, APP0 etc. correctly.
# - Entropy-Coded Data: Parsing 'CompressedImageData' requires Huffman/Arithmetic decoding.
# - Marker Stuffing: Handling 0xFF bytes followed by 0x00 within the compressed data.
