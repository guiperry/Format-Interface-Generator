// Code generated by FormatModule tool. DO NOT EDIT.
package jpg

import (
	"FormatModules/generator" // Dynamically include each required import path

	"encoding/binary" // Dynamically include each required import path

	"fmt" // Dynamically include each required import path

	"github.com/knetic/govaluate" // Dynamically include each required import path

	"io" // Dynamically include each required import path
)

// GenericSegment represents the GenericSegment structure.
type GenericSegment struct {
	Marker uint16 `` // Segment marker (e.g., 0xFFE0 for APP0)

	Length uint16 `` // Length of the segment payload (including the length field itself)

	Payload []byte `` // The actual segment data, excluding the marker

}

// Read populates the struct fields by reading from an io.Reader, using optional context.
// The context can be used by dynamic length calculations.
func (s *GenericSegment) Read(r io.Reader, ctx interface{}) error {
	var err error // Declare err only if needed for Read

	// <-- Declare tmpUint8 once if needed

	// Read Marker (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Read(r, binary.LittleEndian, &s.Marker)
	if err != nil {
		return fmt.Errorf("reading Marker (uint16): %w", err)
	}

	// Read Length (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Read(r, binary.LittleEndian, &s.Length)
	if err != nil {
		return fmt.Errorf("reading Length (uint16): %w", err)
	}

	// Read Payload ([]byte)

	// ... (string, []byte, other numeric types logic remains the same) ...

	// Dynamic length []byte field: Payload using expression: s.Length - 2
	expressionStr := `s.Length - 2`
	expression, errExpr := govaluate.NewEvaluableExpressionWithFunctions(expressionStr, generator.GetExpressionFunctions()) // Use helpers
	if errExpr != nil {
		return fmt.Errorf("parsing length expression for Payload ('%s'): %w", expressionStr, errExpr)
	}
	parameters := map[string]interface{}{"s": s, "ctx": ctx}
	evalResult, errEval := expression.Evaluate(parameters)
	if errEval != nil {
		return fmt.Errorf("evaluating length expression for Payload ('%s'): %w", expressionStr, errEval)
	}
	var size int
	switch v := evalResult.(type) { // Type conversion logic
	case float64:
		size = int(v)
	case float32:
		size = int(v)
	case int:
		size = v
	case int64:
		size = int(v)
	case int32:
		size = int(v)
	case uint:
		size = int(v)
	case uint64:
		size = int(v)
	case uint32:
		size = int(v)
	case uint16:
		size = int(v)
	case uint8:
		size = int(v)
	default:
		return fmt.Errorf("length expression for Payload ('%s') evaluated to non-numeric type %T", expressionStr, evalResult)
	}
	if size < 0 {
		return fmt.Errorf("length expression for Payload ('%s') evaluated to negative size %d", expressionStr, size)
	}
	s.Payload = make([]byte, size)
	_, err = io.ReadFull(r, s.Payload)
	if err != nil {
		return fmt.Errorf("reading Payload ([]byte[dynamic length %s]): %w", expressionStr, err)
	}

	return nil // If we got here, all reads using 'err' were successful

}

// Write serializes the struct fields into an io.Writer.
func (s *GenericSegment) Write(w io.Writer) error {
	var err error // Declare err only if needed for Write
	// NOTE: tmpUint8 is not needed for Write method as we write directly from s.FieldName

	// Write Marker (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Write(w, binary.LittleEndian, s.Marker)
	if err != nil {
		return fmt.Errorf("writing Marker (uint16): %w", err)
	}

	// Write Length (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Write(w, binary.LittleEndian, s.Length)
	if err != nil {
		return fmt.Errorf("writing Length (uint16): %w", err)
	}

	// Write Payload ([]byte)

	// ... (string, []byte, other numeric types logic remains the same) ...

	_, err = w.Write(s.Payload)
	if err != nil {
		return fmt.Errorf("writing Payload ([]byte): %w", err)
	}

	return nil // If we got here, all writes using 'err' were successful

}
