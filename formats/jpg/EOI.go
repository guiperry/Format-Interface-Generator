// Code generated by FormatModule tool. DO NOT EDIT.
package jpg

import (
	"encoding/binary" // Dynamically include each required import path

	"fmt" // Dynamically include each required import path

	"io" // Dynamically include each required import path
)

// EOI represents the EOI structure.
type EOI struct {
	Marker uint16 `` //

}

// Read populates the struct fields by reading from an io.Reader, using optional context.
// The context can be used by dynamic length calculations.
func (s *EOI) Read(r io.Reader, ctx interface{}) error {
	var err error // Declare err only if needed for Read

	// <-- Declare tmpUint8 once if needed

	// Read Marker (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Read(r, binary.LittleEndian, &s.Marker)
	if err != nil {
		return fmt.Errorf("reading Marker (uint16): %w", err)
	}

	return nil // If we got here, all reads using 'err' were successful

}

// Write serializes the struct fields into an io.Writer.
func (s *EOI) Write(w io.Writer) error {
	var err error // Declare err only if needed for Write
	// NOTE: tmpUint8 is not needed for Write method as we write directly from s.FieldName

	// Write Marker (uint16)

	// ... (string, []byte, other numeric types logic remains the same) ...

	err = binary.Write(w, binary.LittleEndian, s.Marker)
	if err != nil {
		return fmt.Errorf("writing Marker (uint16): %w", err)
	}

	return nil // If we got here, all writes using 'err' were successful

}
