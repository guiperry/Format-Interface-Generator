// Code generated by FormatModule tool. DO NOT EDIT.
package bmp

import (
	"FormatModules/generator" // Dynamically include each required import path

	"fmt" // Dynamically include each required import path

	"github.com/knetic/govaluate" // Dynamically include each required import path

	"io" // Dynamically include each required import path
)

// ImageData represents the ImageData structure.
type ImageData struct {
	PixelData []byte `` // RGB pixel data with padding

}

// Read populates the struct fields by reading from an io.Reader, using optional context.
// The context can be used by dynamic length calculations.
func (s *ImageData) Read(r io.Reader, ctx interface{}) error {
	var err error // Declare err only if needed for Read

	// Read PixelData ([]byte)

	// Dynamic length []byte field: PixelData using expression: CalculatePaddedSize(s.Width, s.Height, s.BitsPerPixel)
	expressionStr := `CalculatePaddedSize(s.Width, s.Height, s.BitsPerPixel)`
	expression, errExpr := govaluate.NewEvaluableExpressionWithFunctions(expressionStr, generator.GetExpressionFunctions()) // Use helpers
	if errExpr != nil {
		return fmt.Errorf("parsing length expression for PixelData ('%s'): %w", expressionStr, errExpr)
	}
	parameters := map[string]interface{}{"s": s, "ctx": ctx}
	evalResult, errEval := expression.Evaluate(parameters)
	if errEval != nil {
		return fmt.Errorf("evaluating length expression for PixelData ('%s'): %w", expressionStr, errEval)
	}
	var size int
	switch v := evalResult.(type) { // Type conversion logic
	case float64:
		size = int(v)
	case float32:
		size = int(v)
	case int:
		size = v
	case int64:
		size = int(v)
	case int32:
		size = int(v)
	case uint:
		size = int(v)
	case uint64:
		size = int(v)
	case uint32:
		size = int(v)
	case uint16:
		size = int(v)
	case uint8:
		size = int(v)
	default:
		return fmt.Errorf("length expression for PixelData ('%s') evaluated to non-numeric type %T", expressionStr, evalResult)
	}
	if size < 0 {
		return fmt.Errorf("length expression for PixelData ('%s') evaluated to negative size %d", expressionStr, size)
	}
	s.PixelData = make([]byte, size)
	_, err = io.ReadFull(r, s.PixelData)
	if err != nil {
		return fmt.Errorf("reading PixelData ([]byte[dynamic length %s]): %w", expressionStr, err)
	}

	return nil // If we got here, all reads using 'err' were successful

}

// Write serializes the struct fields into an io.Writer.
func (s *ImageData) Write(w io.Writer) error {
	var err error // Declare err only if needed for Write

	// Write PixelData ([]byte)

	_, err = w.Write(s.PixelData)
	if err != nil {
		return fmt.Errorf("writing PixelData ([]byte): %w", err)
	}

	return nil // If we got here, all writes using 'err' were successful

}
